[general]

# This option stands in the [general] section.
#
# This variable specifies which accounts are defined. Separate them with commas.
# Account names should be alphanumeric only. You will need to specify one
# section per account below. You may not use "general" for an account name.
#
# Always use ASCII characters only.
#
accounts = Test, Personal, Public, Work


# This option stands in the [general] section.
#
# Offlineimap can synchronize more than one account at a time. If you want to
# enable this feature, set the below value to something greater than 1.  To
# force it to synchronize only one account at a time, set it to 1.
#
# NOTE: if you are using autorefresh and have more than one account, you must
# set this number to be >= to the number of accounts you have; since any given
# sync run never "finishes" due to a timer, you will never sync your additional
# accounts if this is 1.
#
#maxsyncaccounts = 1
maxsyncaccounts = 5

ui = TTYUI

pythonfile = ~/.mutt/offlineimap.py


##################################################
# Mailbox name recorder
##################################################

[mbnames]

# OfflineIMAP can record your mailbox names in a format you specify.
# You can define the header, each mailbox item, the separator,
# and the footer.  Here is an example for Mutt.
# If enabled is yes, all settings except incremental must be specified, even if
# they are just the empty string "".
#
# The header, peritem, sep, and footer are all Python expressions passed
# through eval, so you can (and must) use Python quoting.
#
# The incremental setting controls whether the file is written after each
# account completes or once all synced accounts are complete. This is useful if
# an account is sightly slower than the other. It allows keeping the previous
# file rather than having it partially written.
# This works best with "no" if in one-shot mode started by cron or systemd
# timers. Default: no.
#
# The following hash key are available to the expansion for 'peritem':
# - accountname: the name of the corresponding account;
# - foldername: the name of the folder;
# - localfolders: path to the local directory hosting all Maildir
#   folders for the account.
#
# Tilde and environment variable expansions will be performed
# for "filename" knob.
#
#enabled = no
#filename = ~/Mutt/muttrc.mailboxes
#header = "mailboxes "
#peritem = "+%(accountname)s/%(foldername)s"
#sep = " "
#footer = "\n"
#incremental = no
enabled = yes
filename = ~/.mutt/muttrc.mailboxes.offlineimap
header = "mailboxes \\\n"
peritem = "+%(accountname)s/%(foldername)s"
sep = " \\\n"
footer = "\n"
#incremental = no


# This option stands in the [mbnames] section.
#
# You can also specify a folderfilter.  It will apply to the *translated* folder
# name here, and it takes TWO arguments: accountname and foldername.  In all
# other ways, it will behave identically to the folderfilter for accounts.
# Please see the folderfilter option for more information and examples.
#
# This filter can be used only to further restrict mbnames to a subset of
# folders that pass the account's folderfilter.
#
# You can customize the order in which mailbox names are listed in the generated
# file by specifying a sort_keyfunc, which takes a single dict argument
# containing keys 'accountname' and 'foldername'.  This function will be called
# once for each mailbox, and should return a suitable sort key that defines this
# mailbox' position in the custom ordering.
#
# This is useful with e.g. Mutt-sidebar, which uses the mailbox order from the
# generated file when listing mailboxes in the sidebar.
#
# Default setting is:
#sort_keyfunc = lambda d: (d['accountname'], d['foldername'])


##################################################
# Defaults
##################################################
# Set defaults to be shared by multiple accounts

[DEFAULT]

# Accounts
status_backend = sqlite
synclabels = yes
#autorefresh = 5

# Remote repository
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
ssl_version = tls1_2
tls_level = tls_no_ssl

##################################################
# Accounts
##################################################

[Account Test]

localrepository = LocalTest
remoterepository = RemoteTest

# Set of labels to be ignored.  Comma-separated list.  GMail-specific
# labels all start with backslash ('\').
#
# Use ASCII characters only.
#
#ignorelabels = \Inbox, \Starred, \Sent, \Draft, \Spam, \Trash, \Important


[Repository LocalTest]

type = GmailMaildir
localfolders = ~/Mail/Test

# Propagate deletions from local to remote. Messages deleted in this repository
# won't get deleted on remote if set to "no". Default is yes.
sync_deletes = yes

nametrans = lambda folder: {'drafts':    '[Gmail]/Drafts',
                            'sent':      '[Gmail]/Sent Mail',
                            'flagged':   '[Gmail]/Starred',
                            'trash':     '[Gmail]/Trash',
                            'archive':   '[Gmail]/All Mail',
                            'spam':      '[Gmail]/Spam',
                            'important': '[Gmail]/Important',
                            }.get(folder, folder)


[Repository RemoteTest]

type = Gmail
remoteusereval = get_credentials(account="Test",
                                 credential_type="user",
                                 directory="~/.mutt/accounts/")
remotepasseval = get_credentials(account="Test",
                                 credential_type="password",
                                 directory="~/.mutt/accounts/")

maxconnections = 2

nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            '[Gmail]/Spam':      'spam',
                            '[Gmail]/Important': 'important',
                            }.get(folder, folder)

folderfilter = lambda folder: folder in [
                                'INBOX',
                                '[Gmail]/All Mail',
                                # '[Gmail]/Starred',
                                '[Gmail]/Sent Mail',
                                '[Gmail]/Trash',
                                '[Gmail]/Drafts',
                                '[Gmail]/Spam']

# Propagate deletions from remote to local. Messages deleted in this repository
# won't get deleted on the local repositor if set to "no". Default is yes.
sync_deletes = yes

#readonly = False




[Account Personal]

localrepository = LocalPersonal
remoterepository = RemotePersonal

#ignorelabels = \Inbox, \Starred, \Sent, \Draft, \Spam, \Trash, \Important


[Repository LocalPersonal]

type = GmailMaildir
localfolders = ~/Mail/Personal

# Propagate deletions from local to remote. Messages deleted in this repository
# won't get deleted on remote if set to "no". Default is yes.
sync_deletes = no

nametrans = lambda folder: {'drafts':    '[Gmail]/Drafts',
                            'sent':      '[Gmail]/Sent Mail',
                            'flagged':   '[Gmail]/Starred',
                            'trash':     '[Gmail]/Trash',
                            'archive':   '[Gmail]/All Mail',
                            'spam':      '[Gmail]/Spam',
                            'important': '[Gmail]/Important',
                            }.get(folder, folder)


[Repository RemotePersonal]

type = Gmail
remoteusereval = get_credentials(account="personal@gmail.com",
                                 credential_type="user",
                                 directory="~/.mutt/accounts/")
remotepasseval = get_credentials(account="personal@gmail.com",
                                 credential_type="password",
                                 directory="~/.mutt/accounts/")

maxconnections = 2

nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            '[Gmail]/Spam':      'spam',
                            '[Gmail]/Important': 'important',
                            }.get(folder, folder)

folderfilter = lambda folder: folder in [
                                'INBOX',
                                '[Gmail]/All Mail',
                                # '[Gmail]/Starred',
                                '[Gmail]/Sent Mail',
                                '[Gmail]/Trash',
                                '[Gmail]/Drafts',
                                '[Gmail]/Spam']

# Propagate deletions from remote to local. Messages deleted in this repository
# won't get deleted on the local repositor if set to "no". Default is yes.
sync_deletes = no

readonly = False




[Account Public]

localrepository = LocalPublic
remoterepository = RemotePublic

#ignorelabels = \Inbox, \Starred, \Sent, \Draft, \Spam, \Trash, \Important


[Repository LocalPublic]

type = GmailMaildir
localfolders = ~/Mail/Public

# Propagate deletions from local to remote. Messages deleted in this repository
# won't get deleted on remote if set to "no". Default is yes.
sync_deletes = yes

nametrans = lambda folder: {'drafts':    '[Gmail]/Drafts',
                            'sent':      '[Gmail]/Sent Mail',
                            'flagged':   '[Gmail]/Starred',
                            'trash':     '[Gmail]/Trash',
                            'archive':   '[Gmail]/All Mail',
                            'spam':      '[Gmail]/Spam',
                            'important': '[Gmail]/Important',
                            }.get(folder, folder)


[Repository RemotePublic]

type = Gmail
remoteusereval = get_credentials(account="public",
                                 credential_type="user",
                                 directory="~/.mutt/accounts/")
remotepasseval = get_credentials(account="public",
                                 credential_type="password",
                                 directory="~/.mutt/accounts/")

maxconnections = 2

nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            '[Gmail]/Spam':      'spam',
                            '[Gmail]/Important': 'important',
                            }.get(folder, folder)

folderfilter = lambda folder: folder in [
                                'INBOX',
                                '[Gmail]/All Mail',
                                # '[Gmail]/Starred',
                                '[Gmail]/Sent Mail',
                                '[Gmail]/Trash',
                                '[Gmail]/Drafts',
                                '[Gmail]/Spam']

# Propagate deletions from remote to local. Messages deleted in this repository
# won't get deleted on the local repositor if set to "no". Default is yes.
sync_deletes = no

readonly = False




[Account Work]

localrepository = LocalWork
remoterepository = RemoteWork

#ignorelabels = \Inbox, \Starred, \Sent, \Draft, \Spam, \Trash, \Important


[Repository LocalWork]

type = GmailMaildir
localfolders = ~/Mail/Work

# Propagate deletions from local to remote. Messages deleted in this repository
# won't get deleted on remote if set to "no". Default is yes.
sync_deletes = no

nametrans = lambda folder: {'drafts':    '[Gmail]/Drafts',
                            'sent':      '[Gmail]/Sent Mail',
                            'flagged':   '[Gmail]/Starred',
                            'trash':     '[Gmail]/Trash',
                            'archive':   '[Gmail]/All Mail',
                            'spam':      '[Gmail]/Spam',
                            'important': '[Gmail]/Important',
                            }.get(folder, folder)


[Repository RemoteWork]

type = Gmail
remoteusereval = get_credentials(account="work",
                                 credential_type="user",
                                 directory="~/.mutt/accounts/")
remotepasseval = get_credentials(account="work",
                                 credential_type="password",
                                 directory="~/.mutt/accounts/")

maxconnections = 2

nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            '[Gmail]/Spam':      'spam',
                            '[Gmail]/Important': 'important',
                            }.get(folder, folder)

folderfilter = lambda folder: folder in [
                                'INBOX',
                                '[Gmail]/All Mail',
                                # '[Gmail]/Starred',
                                '[Gmail]/Sent Mail',
                                '[Gmail]/Trash',
                                '[Gmail]/Drafts',
                                '[Gmail]/Spam']

# Propagate deletions from remote to local. Messages deleted in this repository
# won't get deleted on the local repositor if set to "no". Default is yes.
sync_deletes = no

readonly = False
